// Code generated by 'yaegi extract github.com/emer/emergent/v2/netview'. DO NOT EDIT.

package yaegiemergent

import (
	"github.com/emer/emergent/v2/netview"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/emer/emergent/v2/netview/netview"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"FormDialog":    reflect.ValueOf(netview.FormDialog),
		"MinUnitHeight": reflect.ValueOf(&netview.MinUnitHeight).Elem(),
		"NVarCols":      reflect.ValueOf(&netview.NVarCols).Elem(),
		"NaNSub":        reflect.ValueOf(constant.MakeFromLiteral("-1.109999999999999999999999999999999999999916376162440762314758469872874704797839925826661159333171163347944189256956023240834378505e-37", token.FLOAT, 0)),
		"NewLayMesh":    reflect.ValueOf(netview.NewLayMesh),
		"NewLayName":    reflect.ValueOf(netview.NewLayName),
		"NewLayObj":     reflect.ValueOf(netview.NewLayObj),
		"NewNetView":    reflect.ValueOf(netview.NewNetView),
		"NewScene":      reflect.ValueOf(netview.NewScene),
		"NilColor":      reflect.ValueOf(&netview.NilColor).Elem(),

		// type definitions
		"LayData":       reflect.ValueOf((*netview.LayData)(nil)),
		"LayMesh":       reflect.ValueOf((*netview.LayMesh)(nil)),
		"LayName":       reflect.ValueOf((*netview.LayName)(nil)),
		"LayObj":        reflect.ValueOf((*netview.LayObj)(nil)),
		"NetData":       reflect.ValueOf((*netview.NetData)(nil)),
		"NetView":       reflect.ValueOf((*netview.NetView)(nil)),
		"Options":       reflect.ValueOf((*netview.Options)(nil)),
		"PathData":      reflect.ValueOf((*netview.PathData)(nil)),
		"RasterOptions": reflect.ValueOf((*netview.RasterOptions)(nil)),
		"Scene":         reflect.ValueOf((*netview.Scene)(nil)),
		"VarOptions":    reflect.ValueOf((*netview.VarOptions)(nil)),
		"ViewUpdate":    reflect.ValueOf((*netview.ViewUpdate)(nil)),
	}
}
