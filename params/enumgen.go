// Code generated by "core generate -add-types"; DO NOT EDIT.

package params

import (
	"cogentcore.org/core/enums"
)

var _TweakTypesValues = []TweakTypes{0, 1}

// TweakTypesN is the highest valid value for type TweakTypes, plus one.
const TweakTypesN TweakTypes = 2

var _TweakTypesValueMap = map[string]TweakTypes{`Increment`: 0, `Log`: 1}

var _TweakTypesDescMap = map[TweakTypes]string{0: `Increment increments around current value, e.g., if .5, generates .4 and .6`, 1: `Log uses the quasi-log scheme: 1, 2, 5, 10 etc, which only applies if value is one of those numbers.`}

var _TweakTypesMap = map[TweakTypes]string{0: `Increment`, 1: `Log`}

// String returns the string representation of this TweakTypes value.
func (i TweakTypes) String() string { return enums.String(i, _TweakTypesMap) }

// SetString sets the TweakTypes value from its string representation,
// and returns an error if the string is invalid.
func (i *TweakTypes) SetString(s string) error {
	return enums.SetString(i, s, _TweakTypesValueMap, "TweakTypes")
}

// Int64 returns the TweakTypes value as an int64.
func (i TweakTypes) Int64() int64 { return int64(i) }

// SetInt64 sets the TweakTypes value from an int64.
func (i *TweakTypes) SetInt64(in int64) { *i = TweakTypes(in) }

// Desc returns the description of the TweakTypes value.
func (i TweakTypes) Desc() string { return enums.Desc(i, _TweakTypesDescMap) }

// TweakTypesValues returns all possible values for the type TweakTypes.
func TweakTypesValues() []TweakTypes { return _TweakTypesValues }

// Values returns all possible values for the type TweakTypes.
func (i TweakTypes) Values() []enums.Enum { return enums.Values(_TweakTypesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i TweakTypes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *TweakTypes) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "TweakTypes")
}
