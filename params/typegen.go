// Code generated by "core generate -add-types"; DO NOT EDIT.

package params

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "github.com/emer/emergent/v2/params.Sel", IDName: "sel", Doc: "Sel specifies a selector for the scope of application of a set of\nparameters, using standard css selector syntax (. prefix = class, # prefix = name,\nand no prefix = type). Type always matches, and generally should come first as an\ninitial set of defaults.", Fields: []types.Field{{Name: "Sel", Doc: "Sel is the selector for what to apply the parameters to,\nusing standard css selector syntax:\n\t- .Example applies to anything with a Class tag of 'Example'\n\t- #Example applies to anything with a Name of 'Example'\n\t- Example with no prefix or blank selector always applies."}, {Name: "Doc", Doc: "Doc is documentation of these parameter values: what effect\ndo they have? what range was explored? It is valuable to record\nthis information as you explore the params."}, {Name: "Set", Doc: "Set function applies parameter values to the given object of the target type."}, {Name: "NMatch", Doc: "NMatch is the number of times this selector matched a target\nduring the last Apply process. A warning is issued for any\nthat remain at 0: See Sheet SelMatchReset and SelNoMatchWarn methods."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/emergent/v2/params.Sheet", IDName: "sheet", Doc: "Sheet is a CSS-like style-sheet of params.Sel values, each of which represents\na different set of specific parameter values applied according to the Sel selector:\n.Class #Name or Type.\n\nThe order of elements in the Sheet list is critical, as they are applied\nin the order given by the list (slice), and thus later Sel's can override\nthose applied earlier. Generally put more general Type-level parameters first,\nand then subsequently more specific ones (.Class and #Name)."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/emergent/v2/params.Sheets", IDName: "sheets", Doc: "Sheets are named collections of Sheet elements that can be chosen among\ndepending on different desired configurations.\nConventionally, there is always a Base configuration with basic-level\ndefaults, and then any number of more specific sets to apply after that."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/emergent/v2/params.SearchValues", IDName: "search-values", Doc: "SearchValues is a list of parameter values to search for one parameter\non a given object (specified by Name), for float-valued params.", Fields: []types.Field{{Name: "Name", Doc: "name of object with the parameter"}, {Name: "Type", Doc: "type of object with the parameter. This is a Base type name (e.g., Layer, Path),\nthat is at the start of the path in Network params."}, {Name: "Path", Doc: "path to the parameter within the object"}, {Name: "Start", Doc: "starting value, e.g., for restoring after searching\nbefore moving on to another parameter, for grid search."}, {Name: "Values", Doc: "values of the parameter to search"}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/emergent/v2/params.Styler", IDName: "styler", Doc: "Styler must be implemented by any object that parameters are\napplied to, to provide the .Class and #Name selector functionality.", Methods: []types.Method{{Name: "StyleClass", Doc: "StyleClass returns the space-separated list of class selectors (tags).\nParameters with a . prefix target class tags.\nDo NOT include the . in the Class tags on Styler objects;\nThe . is only used in the Sel selector on the [Sel].", Returns: []string{"string"}}, {Name: "StyleName", Doc: "StyleName returns the name of this object.\nParameters with a # prefix target object names, which are typically\nunique. Do NOT include the # prefix in the actual object name,\nwhich is only present in the Sel selector on [Sel].", Returns: []string{"string"}}}})
