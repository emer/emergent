// Code generated by "core generate"; DO NOT EDIT.

package levels

import (
	"cogentcore.org/core/enums"
)

var _ModesValues = []Modes{0, 1}

// ModesN is the highest valid value for type Modes, plus one.
//
//gosl:start
const ModesN Modes = 2

//gosl:end

var _ModesValueMap = map[string]Modes{`Train`: 0, `Test`: 1}

var _ModesDescMap = map[Modes]string{0: ``, 1: ``}

var _ModesMap = map[Modes]string{0: `Train`, 1: `Test`}

// String returns the string representation of this Modes value.
func (i Modes) String() string { return enums.String(i, _ModesMap) }

// SetString sets the Modes value from its string representation,
// and returns an error if the string is invalid.
func (i *Modes) SetString(s string) error { return enums.SetString(i, s, _ModesValueMap, "Modes") }

// Int64 returns the Modes value as an int64.
func (i Modes) Int64() int64 { return int64(i) }

// SetInt64 sets the Modes value from an int64.
func (i *Modes) SetInt64(in int64) { *i = Modes(in) }

// Desc returns the description of the Modes value.
func (i Modes) Desc() string { return enums.Desc(i, _ModesDescMap) }

// ModesValues returns all possible values for the type Modes.
func ModesValues() []Modes { return _ModesValues }

// Values returns all possible values for the type Modes.
func (i Modes) Values() []enums.Enum { return enums.Values(_ModesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Modes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Modes) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Modes") }

var _LevelsValues = []Levels{0, 1, 2, 3}

// LevelsN is the highest valid value for type Levels, plus one.
//
//gosl:start
const LevelsN Levels = 4

//gosl:end

var _LevelsValueMap = map[string]Levels{`Cycle`: 0, `Trial`: 1, `Epoch`: 2, `Run`: 3}

var _LevelsDescMap = map[Levels]string{0: ``, 1: ``, 2: ``, 3: ``}

var _LevelsMap = map[Levels]string{0: `Cycle`, 1: `Trial`, 2: `Epoch`, 3: `Run`}

// String returns the string representation of this Levels value.
func (i Levels) String() string { return enums.String(i, _LevelsMap) }

// SetString sets the Levels value from its string representation,
// and returns an error if the string is invalid.
func (i *Levels) SetString(s string) error { return enums.SetString(i, s, _LevelsValueMap, "Levels") }

// Int64 returns the Levels value as an int64.
func (i Levels) Int64() int64 { return int64(i) }

// SetInt64 sets the Levels value from an int64.
func (i *Levels) SetInt64(in int64) { *i = Levels(in) }

// Desc returns the description of the Levels value.
func (i Levels) Desc() string { return enums.Desc(i, _LevelsDescMap) }

// LevelsValues returns all possible values for the type Levels.
func LevelsValues() []Levels { return _LevelsValues }

// Values returns all possible values for the type Levels.
func (i Levels) Values() []enums.Enum { return enums.Values(_LevelsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Levels) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Levels) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Levels") }
